name: Simulated Customer Build Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # --- Validator Jobs ---
  codeowners_validator:
    name: CodeOwners Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: CodeOwners Validation
        run: |
          echo "Simulating CodeOwners check..."
          echo "OK!"

  version_mods_validator:
    name: Version & Mods Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Version & Mods Validation
        run: |
          echo "Simulating version & mods checks..."
          echo "Looks fine!"

  template_validator:
    name: Template Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Template Validator Step
        run: |
          echo "Simulating template validation..."
          echo "All good!"

  # --- Build Job with Matrix Strategy ---
  build:
    name: Build Artifacts
    needs: [codeowners_validator, version_mods_validator, template_validator]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        artifact:
          - type: frontend
            name: frontend-app
            dockerfile: './frontend/Dockerfile'
            context: './frontend'
          - type: docker  # New artifact type for test-app
            name: test-app
            dockerfile: './test-app/Dockerfile'
            context: './test-app'
          - type: jar
            name: service1
            module: 'service1'
          - type: war
            name: war-service1
            module: 'war-service1'
    env:
      TIMESTAMP: ${{ github.run_id }}
      DOCKER_USERNAME: ahmad1194 # Default to your Docker Hub username

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # Set up Java for JAR/WAR builds
      - name: Set up JDK 11
        if: matrix.artifact.type == 'jar' || matrix.artifact.type == 'war'
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      
      # Login to Docker Hub for frontend and docker type builds
      - name: Login to Docker Hub
        if: matrix.artifact.type == 'frontend' || matrix.artifact.type == 'docker'
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Frontend or Docker type images
      - name: Build and Push Docker Image
        if: matrix.artifact.type == 'frontend' || matrix.artifact.type == 'docker'
        run: |
          echo "Building Docker image: ${{ matrix.artifact.name }}..."
          
          # Build Docker image with both latest and timestamped tags
          docker build -t "${{ env.DOCKER_USERNAME }}/${{ matrix.artifact.name }}:latest" \
                       -t "${{ env.DOCKER_USERNAME }}/${{ matrix.artifact.name }}:${TIMESTAMP}" \
                       -f "${{ matrix.artifact.dockerfile }}" "${{ matrix.artifact.context }}"
          
          # Push both tags to Docker Hub
          echo "Pushing to Docker Hub..."
          docker push "${{ env.DOCKER_USERNAME }}/${{ matrix.artifact.name }}:latest"
          docker push "${{ env.DOCKER_USERNAME }}/${{ matrix.artifact.name }}:${TIMESTAMP}"
          
          # Get image digest
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' \
            "${{ env.DOCKER_USERNAME }}/${{ matrix.artifact.name }}:latest" | cut -d':' -f2 || echo "not-available")
          echo "IMAGE_DIGEST=$IMAGE_DIGEST" >> $GITHUB_ENV
          
          echo "Docker image pushed successfully to ${{ env.DOCKER_USERNAME }}/${{ matrix.artifact.name }}"

      # Build and publish JAR
      - name: Build and Publish JAR
        if: matrix.artifact.type == 'jar'
        run: |
          MODULE="${{ matrix.artifact.module }}"
          echo "Processing JAR artifact: $MODULE"
          
          # Check if we can build with Maven
          if [ -f "$MODULE/pom.xml" ]; then
            echo "Building with Maven..."
            cd $MODULE
            mvn package -DskipTests
            cd ..
          fi
          
          # Find the JAR file
          JAR_FILE=$(find $MODULE/target -name "*.jar" | head -n 1)
          
          if [ -z "$JAR_FILE" ]; then
            echo "No JAR file found, using placeholder"
            JAR_FILE="$MODULE/target/$MODULE-1.0.0.jar"
          fi
          
          echo "JAR file to publish: $JAR_FILE"
          
          # Publish to GitHub Packages or other Maven repository
          if [ -n "${{ secrets.ARTIFACTORY_URL }}" ]; then
            # Push to JFrog Artifactory if configured
            echo "Publishing to JFrog Artifactory..."
            curl -u "${{ secrets.ARTIFACTORY_USERNAME }}:${{ secrets.ARTIFACTORY_PASSWORD }}" \
              -T "$JAR_FILE" \
              "${{ secrets.ARTIFACTORY_URL }}/my-jar-repo/$MODULE/$(basename $JAR_FILE)"
          else
            # Use GitHub Packages as fallback
            echo "Publishing to GitHub Packages..."
            # First, create a settings.xml for Maven
            mkdir -p ~/.m2
            echo "<settings>
              <servers>
                <server>
                  <id>github</id>
                  <username>${{ github.actor }}</username>
                  <password>${{ secrets.GITHUB_TOKEN }}</password>
                </server>
              </servers>
            </settings>" > ~/.m2/settings.xml
            
            # Add GitHub Packages repository to pom.xml
            TEMP_POM=$(mktemp)
            cat $MODULE/pom.xml > $TEMP_POM
            echo "<distributionManagement>
              <repository>
                <id>github</id>
                <name>GitHub Packages</name>
                <url>https://maven.pkg.github.com/${{ github.repository }}</url>
              </repository>
            </distributionManagement>" >> $TEMP_POM
            
            # Deploy using Maven
            mvn -B deploy:deploy-file \
              -DgroupId=com.example \
              -DartifactId=$MODULE \
              -Dversion=1.0.0 \
              -Dpackaging=jar \
              -Dfile=$JAR_FILE \
              -DrepositoryId=github \
              -Durl=https://maven.pkg.github.com/${{ github.repository }} \
              -DpomFile=$TEMP_POM
          fi
          
          echo "JAR artifact published successfully"

      # Build and publish WAR
      - name: Build and Publish WAR
        if: matrix.artifact.type == 'war'
        run: |
          MODULE="${{ matrix.artifact.module }}"
          echo "Processing WAR artifact: $MODULE"
          
          # Check if we can build with Maven
          if [ -f "$MODULE/pom.xml" ]; then
            echo "Building with Maven..."
            cd $MODULE
            mvn package -DskipTests
            cd ..
          fi
          
          # Find the WAR file
          WAR_FILE=$(find $MODULE/target -name "*.war" | head -n 1)
          
          if [ -z "$WAR_FILE" ]; then
            echo "No WAR file found, using placeholder"
            WAR_FILE="$MODULE/target/$MODULE-1.0.0.war"
          fi
          
          echo "WAR file to publish: $WAR_FILE"
          
          # Publish to GitHub Packages or other Maven repository
          if [ -n "${{ secrets.ARTIFACTORY_URL }}" ]; then
            # Push to JFrog Artifactory if configured
            echo "Publishing to JFrog Artifactory..."
            curl -u "${{ secrets.ARTIFACTORY_USERNAME }}:${{ secrets.ARTIFACTORY_PASSWORD }}" \
              -T "$WAR_FILE" \
              "${{ secrets.ARTIFACTORY_URL }}/my-war-repo/$MODULE/$(basename $WAR_FILE)"
          else
            # Use GitHub Packages as fallback
            echo "Publishing to GitHub Packages..."
            # First, create a settings.xml for Maven
            mkdir -p ~/.m2
            echo "<settings>
              <servers>
                <server>
                  <id>github</id>
                  <username>${{ github.actor }}</username>
                  <password>${{ secrets.GITHUB_TOKEN }}</password>
                </server>
              </servers>
            </settings>" > ~/.m2/settings.xml
            
            # Add GitHub Packages repository to pom.xml
            TEMP_POM=$(mktemp)
            cat $MODULE/pom.xml > $TEMP_POM
            echo "<distributionManagement>
              <repository>
                <id>github</id>
                <name>GitHub Packages</name>
                <url>https://maven.pkg.github.com/${{ github.repository }}</url>
              </repository>
            </distributionManagement>" >> $TEMP_POM
            
            # Deploy using Maven
            mvn -B deploy:deploy-file \
              -DgroupId=com.example \
              -DartifactId=$MODULE \
              -Dversion=1.0.0 \
              -Dpackaging=war \
              -Dfile=$WAR_FILE \
              -DrepositoryId=github \
              -Durl=https://maven.pkg.github.com/${{ github.repository }} \
              -DpomFile=$TEMP_POM
          fi
          
          echo "WAR artifact published successfully"

      # Step 1: Create RabbitMQ Infrastructure
      - name: Setup RabbitMQ Exchange and Queue
        if: success()
        env:
          RABBITMQ_URL: ${{ secrets.RABBITMQ_URL }}
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
          RABBITMQ_QUEUE: "githubactions-ssd"
          RABBITMQ_EXCHANGE: "githubactions.events"
          RABBITMQ_ROUTING_KEY: "githubactions-ssd"
        run: |
          # Check if RabbitMQ credentials are set
          if [ -z "$RABBITMQ_URL" ] || [ -z "$RABBITMQ_USER" ] || [ -z "$RABBITMQ_PASS" ]; then
            echo "RabbitMQ credentials not fully configured, skipping setup"
            exit 0
          fi
          
          echo "Setting up RabbitMQ exchanges and queues..."
          
          # Create the exchange
          echo "Creating exchange: $RABBITMQ_EXCHANGE"
          curl -u $RABBITMQ_USER:$RABBITMQ_PASS \
               -H "Content-Type: application/json" \
               -X PUT "$RABBITMQ_URL/api/exchanges/%2F/$RABBITMQ_EXCHANGE" \
               -d '{"type":"direct","durable":true}'
          
          # Create the queue
          echo "Creating queue: $RABBITMQ_QUEUE"
          curl -u $RABBITMQ_USER:$RABBITMQ_PASS \
               -H "Content-Type: application/json" \
               -X PUT "$RABBITMQ_URL/api/queues/%2F/$RABBITMQ_QUEUE" \
               -d '{"durable":true}'
          
          # Bind the queue to the exchange with the routing key
          echo "Binding queue to exchange with key: $RABBITMQ_ROUTING_KEY"
          curl -u $RABBITMQ_USER:$RABBITMQ_PASS \
               -H "Content-Type: application/json" \
               -X POST "$RABBITMQ_URL/api/bindings/%2F/e/$RABBITMQ_EXCHANGE/q/$RABBITMQ_QUEUE" \
               -d '{"routing_key":"'$RABBITMQ_ROUTING_KEY'"}'

      # Step 2: Send the actual notification
      - name: Send Build Metadata to RabbitMQ
        if: success()
        env:
          RABBITMQ_URL: ${{ secrets.RABBITMQ_URL }}
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
          RABBITMQ_QUEUE: "githubactions-ssd"
          RABBITMQ_EXCHANGE: "githubactions.events"
          RABBITMQ_ROUTING_KEY: "githubactions-ssd"
          ORG_NAME: "opsmx"
        run: |
          # Check if RabbitMQ credentials are set
          if [ -z "$RABBITMQ_URL" ] || [ -z "$RABBITMQ_USER" ] || [ -z "$RABBITMQ_PASS" ]; then
            echo "RabbitMQ credentials not fully configured, skipping notification"
            exit 0
          fi
          
          # Create the inner message payload with all required fields
          echo "Preparing RabbitMQ message for ${{ matrix.artifact.type }} artifact..."
          
          # Common GitHub metadata for all artifact types
          JOB_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          if [ "${{ matrix.artifact.type }}" = "frontend" ] || [ "${{ matrix.artifact.type }}" = "docker" ]; then
            # For Docker images
            IMAGE_NAME="${{ env.DOCKER_USERNAME }}/${{ matrix.artifact.name }}"
            MESSAGE=$(jq -n \
              --arg image "$IMAGE_NAME:${TIMESTAMP}" \
              --arg imageTag "${TIMESTAMP}" \
              --arg imgsha "sha256:${{ env.IMAGE_DIGEST }}" \
              --arg jobId "${{ github.job }}" \
              --arg buildNumber "${{ github.run_number }}" \
              --arg gitUrl "${{ github.server_url }}/${{ github.repository }}" \
              --arg gitCommit "${{ github.sha }}" \
              --arg gitBranch "${{ github.ref_name }}" \
              --arg jobUrl "$JOB_URL" \
              --arg buildTime "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
              --arg buildUser "${{ github.actor }}" \
              --arg visibility "public" \
              --arg organization "$ORG_NAME" \
              --arg workflowName "Simulated Customer Build Pipeline" \
              '{
                image: $image,
                imageTag: $imageTag,
                imgsha: $imgsha,
                jobId: $jobId,
                buildNumber: $buildNumber,
                gitUrl: $gitUrl,
                gitCommit: $gitCommit,
                gitBranch: $gitBranch,
                jobUrl: $jobUrl,
                buildTime: $buildTime,
                buildUser: $buildUser,
                diffCommits: "",
                visibility: $visibility,
                parentRepo: "",
                licenseName: "",
                organization: $organization,
                workflowName: $workflowName,
                applicationTags: "frontend,nginx"
              }')
          elif [ "${{ matrix.artifact.type }}" = "jar" ]; then
            # For JAR artifacts
            MESSAGE=$(jq -n \
              --arg artifact "${{ matrix.artifact.module }}" \
              --arg type "jar" \
              --arg version "1.0.0" \
              --arg jobId "${{ github.job }}" \
              --arg buildNumber "${{ github.run_number }}" \
              --arg gitUrl "${{ github.server_url }}/${{ github.repository }}" \
              --arg gitCommit "${{ github.sha }}" \
              --arg gitBranch "${{ github.ref_name }}" \
              --arg jobUrl "$JOB_URL" \
              --arg buildTime "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
              --arg buildUser "${{ github.actor }}" \
              --arg organization "$ORG_NAME" \
              --arg workflowName "Simulated Customer Build Pipeline" \
              '{
                artifact: $artifact,
                type: $type,
                version: $version,
                jobId: $jobId,
                buildNumber: $buildNumber,
                gitUrl: $gitUrl,
                gitCommit: $gitCommit,
                gitBranch: $gitBranch,
                jobUrl: $jobUrl,
                buildTime: $buildTime,
                buildUser: $buildUser,
                diffCommits: "",
                visibility: "public",
                organization: $organization,
                workflowName: $workflowName,
                applicationTags: "java,jar"
              }')
          elif [ "${{ matrix.artifact.type }}" = "war" ]; then
            # For WAR artifacts
            MESSAGE=$(jq -n \
              --arg artifact "${{ matrix.artifact.module }}" \
              --arg type "war" \
              --arg version "1.0.0" \
              --arg jobId "${{ github.job }}" \
              --arg buildNumber "${{ github.run_number }}" \
              --arg gitUrl "${{ github.server_url }}/${{ github.repository }}" \
              --arg gitCommit "${{ github.sha }}" \
              --arg gitBranch "${{ github.ref_name }}" \
              --arg jobUrl "$JOB_URL" \
              --arg buildTime "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
              --arg buildUser "${{ github.actor }}" \
              --arg organization "$ORG_NAME" \
              --arg workflowName "Simulated Customer Build Pipeline" \
              '{
                artifact: $artifact,
                type: $type,
                version: $version,
                jobId: $jobId,
                buildNumber: $buildNumber,
                gitUrl: $gitUrl,
                gitCommit: $gitCommit,
                gitBranch: $gitBranch,
                jobUrl: $jobUrl,
                buildTime: $buildTime,
                buildUser: $buildUser,
                diffCommits: "",
                visibility: "public",
                organization: $organization,
                workflowName: $workflowName,
                applicationTags: "java,war"
              }')
          fi
          
          # Create the outer payload with the required RabbitMQ API structure
          PAYLOAD=$(jq -n \
              --arg vhost "/" \
              --arg name "$RABBITMQ_EXCHANGE" \
              --argjson properties '{}' \
              --arg routing_key "$RABBITMQ_ROUTING_KEY" \
              --arg delivery_mode "2" \
              --arg payload "$MESSAGE" \
              --arg payload_encoding "string" \
              '{
                vhost: $vhost,
                name: $name,
                properties: $properties,
                routing_key: $routing_key,
                delivery_mode: $delivery_mode,
                payload: $payload,
                payload_encoding: $payload_encoding
              }')
          
          echo "Sending build event to RabbitMQ for artifact: ${{ matrix.artifact.name }}"
          echo "Using exchange: $RABBITMQ_EXCHANGE, routing key: $RABBITMQ_ROUTING_KEY"
          
          curl -v -u $RABBITMQ_USER:$RABBITMQ_PASS \
              -H "Content-Type: application/json" \
              -X POST "$RABBITMQ_URL/api/exchanges/%2F/$RABBITMQ_EXCHANGE/publish" \
              --data-binary "$PAYLOAD"
              
          # Check curl exit status
          if [ $? -eq 0 ]; then
            echo "Successfully sent notification to RabbitMQ"
          else
            echo "Failed to send notification to RabbitMQ"
            # Don't fail the build if RabbitMQ notification fails
            # exit 1
          fi
