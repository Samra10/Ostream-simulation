name: Simulated Customer Build Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # --- Validator Jobs ---
  codeowners_validator:
    name: CodeOwners Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: CodeOwners Validation
        run: |
          echo "Simulating CodeOwners check..."
          echo "OK!"

  version_mods_validator:
    name: Version & Mods Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Version & Mods Validation
        run: |
          echo "Simulating version & mods checks..."
          echo "Looks fine!"

  template_validator:
    name: Template Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Template Validator Step
        run: |
          echo "Simulating template validation..."
          echo "All good!"

  # --- Build Job with Matrix Strategy ---
  build:
    name: Build Artifacts
    needs: [codeowners_validator, version_mods_validator, template_validator]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        artifact:
          - type: frontend
            name: frontend-app
            dockerfile: './frontend/Dockerfile'
            context: './frontend'
          - type: jar
            name: service1
            module: 'service1'
          - type: war
            name: war-service1
            module: 'war-service1'
    env:
      TIMESTAMP: ${{ github.run_id }}
      DOCKER_USERNAME: ahmad1194 # Default to your Docker Hub username

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # Set up Java for JAR/WAR builds
      - name: Set up JDK 11
        if: matrix.artifact.type == 'jar' || matrix.artifact.type == 'war'
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      
      # Create placeholder Java modules if they don't exist
      - name: Create Java Test Modules
        if: matrix.artifact.type == 'jar' || matrix.artifact.type == 'war'
        run: |
          MODULE="${{ matrix.artifact.module }}"
          
          # Check if the module directory exists
          if [ ! -d "$MODULE" ]; then
            echo "Creating test module: $MODULE"
            mkdir -p $MODULE/src/main/java/com/example
            mkdir -p $MODULE/target
            
            # Create a simple Java class
            cat > $MODULE/src/main/java/com/example/HelloWorld.java << EOF
            package com.example;
            
            public class HelloWorld {
                public static void main(String[] args) {
                    System.out.println("Hello, World!");
                }
            }
            EOF
            
            # Create a basic pom.xml file
            if [ "${{ matrix.artifact.type }}" = "jar" ]; then
              cat > $MODULE/pom.xml << EOF
              <project xmlns="http://maven.apache.org/POM/4.0.0"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                                          http://maven.apache.org/xsd/maven-4.0.0.xsd">
                <modelVersion>4.0.0</modelVersion>
                <groupId>com.example</groupId>
                <artifactId>${MODULE}</artifactId>
                <version>1.0.0</version>
                <properties>
                  <maven.compiler.source>11</maven.compiler.source>
                  <maven.compiler.target>11</maven.compiler.target>
                </properties>
              </project>
              EOF
              
              # Create a simple JAR file
              echo "Creating test JAR file..."
              jar -cf $MODULE/target/$MODULE-1.0.0.jar -C $MODULE/src .
              
            else
              cat > $MODULE/pom.xml << EOF
              <project xmlns="http://maven.apache.org/POM/4.0.0"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                                          http://maven.apache.org/xsd/maven-4.0.0.xsd">
                <modelVersion>4.0.0</modelVersion>
                <groupId>com.example</groupId>
                <artifactId>${MODULE}</artifactId>
                <version>1.0.0</version>
                <packaging>war</packaging>
                <properties>
                  <maven.compiler.source>11</maven.compiler.source>
                  <maven.compiler.target>11</maven.compiler.target>
                </properties>
              </project>
              EOF
              
              # Create a simple WAR structure
              mkdir -p $MODULE/src/main/webapp/WEB-INF
              echo "<web-app/>" > $MODULE/src/main/webapp/WEB-INF/web.xml
              echo "<html><body>Hello World</body></html>" > $MODULE/src/main/webapp/index.html
              
              # Create a simple WAR file
              echo "Creating test WAR file..."
              jar -cf $MODULE/target/$MODULE-1.0.0.war -C $MODULE/src/main/webapp .
            fi
          else
            echo "Module $MODULE already exists, skipping creation"
          fi

      # Login to Docker Hub for frontend
      - name: Login to Docker Hub
        if: matrix.artifact.type == 'frontend'
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Frontend Docker image
      - name: Build and Push Frontend Docker Image
        if: matrix.artifact.type == 'frontend'
        run: |
          echo "Building frontend Docker image..."
          
          # Build Docker image with both latest and timestamped tags
          docker build -t "${{ env.DOCKER_USERNAME }}/${{ matrix.artifact.name }}:latest" \
                       -t "${{ env.DOCKER_USERNAME }}/${{ matrix.artifact.name }}:${TIMESTAMP}" \
                       -f "${{ matrix.artifact.dockerfile }}" "${{ matrix.artifact.context }}"
          
          # Push both tags to Docker Hub
          echo "Pushing to Docker Hub..."
          docker push "${{ env.DOCKER_USERNAME }}/${{ matrix.artifact.name }}:latest"
          docker push "${{ env.DOCKER_USERNAME }}/${{ matrix.artifact.name }}:${TIMESTAMP}"
          
          # Get image digest
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' \
            "${{ env.DOCKER_USERNAME }}/${{ matrix.artifact.name }}:latest" | cut -d':' -f2 || echo "not-available")
          echo "IMAGE_DIGEST=$IMAGE_DIGEST" >> $GITHUB_ENV
          
          echo "Docker image pushed successfully to ${{ env.DOCKER_USERNAME }}/${{ matrix.artifact.name }}"

      # Build and publish JAR
      - name: Build and Publish JAR
        if: matrix.artifact.type == 'jar'
        run: |
          MODULE="${{ matrix.artifact.module }}"
          echo "Processing JAR artifact: $MODULE"
          
          # Check if we can build with Maven
          if [ -f "$MODULE/pom.xml" ]; then
            echo "Building with Maven..."
            cd $MODULE
            mvn package -DskipTests
            cd ..
          fi
          
          # Find the JAR file
          JAR_FILE=$(find $MODULE/target -name "*.jar" | head -n 1)
          
          if [ -z "$JAR_FILE" ]; then
            echo "No JAR file found, using placeholder"
            JAR_FILE="$MODULE/target/$MODULE-1.0.0.jar"
          fi
          
          echo "JAR file to publish: $JAR_FILE"
          
          # Publish to GitHub Packages or other Maven repository
          if [ -n "${{ secrets.ARTIFACTORY_URL }}" ]; then
            # Push to JFrog Artifactory if configured
            echo "Publishing to JFrog Artifactory..."
            curl -u "${{ secrets.ARTIFACTORY_USERNAME }}:${{ secrets.ARTIFACTORY_PASSWORD }}" \
              -T "$JAR_FILE" \
              "${{ secrets.ARTIFACTORY_URL }}/my-jar-repo/$MODULE/$(basename $JAR_FILE)"
          else
            # Use GitHub Packages as fallback
            echo "Publishing to GitHub Packages..."
            # First, create a settings.xml for Maven
            mkdir -p ~/.m2
            echo "<settings>
              <servers>
                <server>
                  <id>github</id>
                  <username>${{ github.actor }}</username>
                  <password>${{ secrets.GITHUB_TOKEN }}</password>
                </server>
              </servers>
            </settings>" > ~/.m2/settings.xml
            
            # Add GitHub Packages repository to pom.xml
            TEMP_POM=$(mktemp)
            cat $MODULE/pom.xml > $TEMP_POM
            echo "<distributionManagement>
              <repository>
                <id>github</id>
                <name>GitHub Packages</name>
                <url>https://maven.pkg.github.com/${{ github.repository }}</url>
              </repository>
            </distributionManagement>" >> $TEMP_POM
            
            # Deploy using Maven
            mvn -B deploy:deploy-file \
              -DgroupId=com.example \
              -DartifactId=$MODULE \
              -Dversion=1.0.0 \
              -Dpackaging=jar \
              -Dfile=$JAR_FILE \
              -DrepositoryId=github \
              -Durl=https://maven.pkg.github.com/${{ github.repository }} \
              -DpomFile=$TEMP_POM
          fi
          
          echo "JAR artifact published successfully"

      # Build and publish WAR
      - name: Build and Publish WAR
        if: matrix.artifact.type == 'war'
        run: |
          MODULE="${{ matrix.artifact.module }}"
          echo "Processing WAR artifact: $MODULE"
          
          # Check if we can build with Maven
          if [ -f "$MODULE/pom.xml" ]; then
            echo "Building with Maven..."
            cd $MODULE
            mvn package -DskipTests
            cd ..
          fi
          
          # Find the WAR file
          WAR_FILE=$(find $MODULE/target -name "*.war" | head -n 1)
          
          if [ -z "$WAR_FILE" ]; then
            echo "No WAR file found, using placeholder"
            WAR_FILE="$MODULE/target/$MODULE-1.0.0.war"
          fi
          
          echo "WAR file to publish: $WAR_FILE"
          
          # Publish to GitHub Packages or other Maven repository
          if [ -n "${{ secrets.ARTIFACTORY_URL }}" ]; then
            # Push to JFrog Artifactory if configured
            echo "Publishing to JFrog Artifactory..."
            curl -u "${{ secrets.ARTIFACTORY_USERNAME }}:${{ secrets.ARTIFACTORY_PASSWORD }}" \
              -T "$WAR_FILE" \
              "${{ secrets.ARTIFACTORY_URL }}/my-war-repo/$MODULE/$(basename $WAR_FILE)"
          else
            # Use GitHub Packages as fallback
            echo "Publishing to GitHub Packages..."
            # First, create a settings.xml for Maven
            mkdir -p ~/.m2
            echo "<settings>
              <servers>
                <server>
                  <id>github</id>
                  <username>${{ github.actor }}</username>
                  <password>${{ secrets.GITHUB_TOKEN }}</password>
                </server>
              </servers>
            </settings>" > ~/.m2/settings.xml
            
            # Add GitHub Packages repository to pom.xml
            TEMP_POM=$(mktemp)
            cat $MODULE/pom.xml > $TEMP_POM
            echo "<distributionManagement>
              <repository>
                <id>github</id>
                <name>GitHub Packages</name>
                <url>https://maven.pkg.github.com/${{ github.repository }}</url>
              </repository>
            </distributionManagement>" >> $TEMP_POM
            
            # Deploy using Maven
            mvn -B deploy:deploy-file \
              -DgroupId=com.example \
              -DartifactId=$MODULE \
              -Dversion=1.0.0 \
              -Dpackaging=war \
              -Dfile=$WAR_FILE \
              -DrepositoryId=github \
              -Durl=https://maven.pkg.github.com/${{ github.repository }} \
              -DpomFile=$TEMP_POM
          fi
          
          echo "WAR artifact published successfully"

      # Send build metadata to RabbitMQ
      - name: Send Build Metadata to RabbitMQ
        if: success() && secrets.RABBITMQ_URL != ''
        env:
          RABBITMQ_URL: ${{ secrets.RABBITMQ_URL }}
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
        run: |
          # Create appropriate payload based on artifact type
          if [ "${{ matrix.artifact.type }}" = "frontend" ]; then
            PAYLOAD=$(jq -n \
              --arg artifact "${{ matrix.artifact.name }}" \
              --arg tag "${TIMESTAMP}" \
              --arg digest "sha256:${{ env.IMAGE_DIGEST }}" \
              '{artifact: $artifact, imageTag: $tag, digest: $digest}')
          elif [ "${{ matrix.artifact.type }}" = "jar" ]; then
            PAYLOAD=$(jq -n \
              --arg artifact "${{ matrix.artifact.module }}" \
              --arg type "jar" \
              --arg version "1.0.0" \
              '{artifact: $artifact, type: $type, version: $version}')
          elif [ "${{ matrix.artifact.type }}" = "war" ]; then
            PAYLOAD=$(jq -n \
              --arg artifact "${{ matrix.artifact.module }}" \
              --arg type "war" \
              --arg version "1.0.0" \
              '{artifact: $artifact, type: $type, version: $version}')
          fi

          echo "Sending build event to RabbitMQ for artifact: ${{ matrix.artifact.name }}"
          curl -u $RABBITMQ_USER:$RABBITMQ_PASS \
              -H "Content-Type: application/json" \
              -X POST "$RABBITMQ_URL/api/exchanges/%2F/build-events/publish" \
              --data-binary "$(jq -n --arg payload "$PAYLOAD" --arg routing_key "build.event" \
                '{vhost: "/", name: "build-events", routing_key: $routing_key, payload: $payload, payload_encoding: "string"}')"
