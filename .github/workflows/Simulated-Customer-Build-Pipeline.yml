name: Simulated Customer Build Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # --- Validator Jobs ---
  codeowners_validator:
    name: CodeOwners Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: CodeOwners Validation
        run: |
          echo "Simulating CodeOwners check..."
          echo "OK!"

  version_mods_validator:
    name: Version & Mods Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Version & Mods Validation
        run: |
          echo "Simulating version & mods checks..."
          echo "Looks fine!"

  template_validator:
    name: Template Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Template Validator Step
        run: |
          echo "Simulating template validation..."
          echo "All good!"

  # --- Build and Push Artifacts ---
  build-and-push:
    name: Build and Push Artifacts
    needs: [codeowners_validator, version_mods_validator, template_validator]
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Docker images
          - type: docker
            name: frontend-app
            dockerfile: './frontend/Dockerfile'
            context: './frontend'
          - type: docker
            name: test-app
            dockerfile: './test-app/Dockerfile'
            context: './test-app'
          # Java artifacts
          - type: jar
            name: service1
            module: 'service1'
          - type: war
            name: war-service1
            module: 'war-service1'
    
    env:
      TIMESTAMP: ${{ github.run_id }}
      DOCKER_USERNAME: ahmad1194

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # --- Setup For Java Builds ---
      - name: Set up JDK 11
        if: matrix.type == 'jar' || matrix.type == 'war'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # --- Create Test Modules For Java ---
      - name: Create Test Java Module
        if: matrix.type == 'jar' || matrix.type == 'war'
        run: |
          MODULE="${{ matrix.module }}"
          
          # Create module if it doesn't exist
          if [ ! -d "$MODULE" ]; then
            echo "Creating test module: $MODULE"
            mkdir -p $MODULE/src/main/java/com/example
            mkdir -p $MODULE/target
            
            # Create a basic Java file
            cat > $MODULE/src/main/java/com/example/HelloWorld.java << 'EOT'
            package com.example;
            
            public class HelloWorld {
                public static void main(String[] args) {
                    System.out.println("Hello, World!");
                }
            }
            EOT
            
            # Create pom.xml with appropriate packaging
            if [ "${{ matrix.type }}" = "jar" ]; then
              echo "Creating JAR pom.xml"
              cat > $MODULE/pom.xml << 'EOT'
              <project>
                <modelVersion>4.0.0</modelVersion>
                <groupId>com.example</groupId>
                <artifactId>MODULE_NAME</artifactId>
                <version>1.0.0</version>
              </project>
              EOT
              sed -i "s/MODULE_NAME/$MODULE/g" $MODULE/pom.xml
              
              # Create placeholder JAR file
              echo "Creating placeholder JAR"
              touch $MODULE/target/$MODULE-1.0.0.jar
              
            else
              echo "Creating WAR pom.xml"
              cat > $MODULE/pom.xml << 'EOT'
              <project>
                <modelVersion>4.0.0</modelVersion>
                <groupId>com.example</groupId>
                <artifactId>MODULE_NAME</artifactId>
                <version>1.0.0</version>
                <packaging>war</packaging>
              </project>
              EOT
              sed -i "s/MODULE_NAME/$MODULE/g" $MODULE/pom.xml
              
              # Create simple WAR content
              mkdir -p $MODULE/src/main/webapp/WEB-INF
              echo "<web-app/>" > $MODULE/src/main/webapp/WEB-INF/web.xml
              echo "<html><body>Hello World</body></html>" > $MODULE/src/main/webapp/index.html
              
              # Create placeholder WAR file
              echo "Creating placeholder WAR"
              mkdir -p $MODULE/target
              touch $MODULE/target/$MODULE-1.0.0.war
            fi
          fi

      # --- Docker Builds ---
      - name: Login to Docker Hub
        if: matrix.type == 'docker'
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        if: matrix.type == 'docker'
        run: |
          echo "Building and pushing Docker image: ${{ matrix.name }}"
          
          # Build with both latest and timestamped tags
          docker build -t "${{ env.DOCKER_USERNAME }}/${{ matrix.name }}:latest" \
                      -t "${{ env.DOCKER_USERNAME }}/${{ matrix.name }}:${TIMESTAMP}" \
                      -f "${{ matrix.dockerfile }}" "${{ matrix.context }}"
          
          # Push both tags
          docker push "${{ env.DOCKER_USERNAME }}/${{ matrix.name }}:latest"
          docker push "${{ env.DOCKER_USERNAME }}/${{ matrix.name }}:${TIMESTAMP}"
          
          # Get image digest for RabbitMQ notification
          echo "IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' \
            ${{ env.DOCKER_USERNAME }}/${{ matrix.name }}:latest | cut -d':' -f2)" >> $GITHUB_ENV
          
          echo "Successfully pushed Docker image: ${{ env.DOCKER_USERNAME }}/${{ matrix.name }}"

      # --- Java Builds ---
      - name: Build and Push JAR
        if: matrix.type == 'jar'
        run: |
          MODULE="${{ matrix.module }}"
          echo "Processing JAR artifact: $MODULE"
          
          # Try to build with Maven if the structure looks right
          if [ -f "$MODULE/pom.xml" ]; then
            cd $MODULE
            
            # Check if we can run maven
            if grep -q "<artifactId>" pom.xml; then
              echo "Building with Maven..."
              mvn package -DskipTests || echo "Maven build failed, using placeholder"
            fi
            
            cd ..
          fi
          
          # Find JAR file
          JAR_FILE=$(find $MODULE/target -name "*.jar" | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "No JAR file found, creating placeholder"
            echo "This is a placeholder JAR" > $MODULE/target/$MODULE-1.0.0.jar
            JAR_FILE="$MODULE/target/$MODULE-1.0.0.jar"
          fi
          
          echo "JAR file to push: $JAR_FILE"
          
          # Push to JFrog if credentials exist
          if [ -n "${{ secrets.JFROG_USERNAME }}" ] && [ -n "${{ secrets.JFROG_PASSWORD }}" ]; then
            JFROG_URL="${{ secrets.JFROG_URL }}"
            # Add https if missing
            [[ "$JFROG_URL" != http* ]] && JFROG_URL="https://$JFROG_URL"
            
            echo "Pushing JAR to JFrog Artifactory"
            curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }}" \
              -T "$JAR_FILE" \
              "$JFROG_URL/artifactory/my-jar-repo/$MODULE/$(basename $JAR_FILE)"
              
            if [ $? -eq 0 ]; then
              echo "Successfully pushed JAR to JFrog Artifactory"
            else
              echo "Failed to push JAR to JFrog Artifactory, but continuing"
            fi
          else
            echo "JFrog credentials not provided, skipping push"
          fi

      - name: Build and Push WAR
        if: matrix.type == 'war'
        run: |
          MODULE="${{ matrix.module }}"
          echo "Processing WAR artifact: $MODULE"
          
          # Try to build with Maven if the structure looks right
          if [ -f "$MODULE/pom.xml" ]; then
            cd $MODULE
            
            # Check if we can run maven
            if grep -q "<artifactId>" pom.xml; then
              echo "Building with Maven..."
              mvn package -DskipTests || echo "Maven build failed, using placeholder"
            fi
            
            cd ..
          fi
          
          # Find WAR file
          WAR_FILE=$(find $MODULE/target -name "*.war" | head -n 1)
          if [ -z "$WAR_FILE" ]; then
            echo "No WAR file found, creating placeholder"
            echo "This is a placeholder WAR" > $MODULE/target/$MODULE-1.0.0.war
            WAR_FILE="$MODULE/target/$MODULE-1.0.0.war"
          fi
          
          echo "WAR file to push: $WAR_FILE"
          
          # Push to JFrog if credentials exist
          if [ -n "${{ secrets.JFROG_USERNAME }}" ] && [ -n "${{ secrets.JFROG_PASSWORD }}" ]; then
            JFROG_URL="${{ secrets.JFROG_URL }}"
            # Add https if missing
            [[ "$JFROG_URL" != http* ]] && JFROG_URL="https://$JFROG_URL"
            
            echo "Pushing WAR to JFrog Artifactory"
            curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }}" \
              -T "$WAR_FILE" \
              "$JFROG_URL/artifactory/my-war-repo/$MODULE/$(basename $WAR_FILE)"
              
            if [ $? -eq 0 ]; then
              echo "Successfully pushed WAR to JFrog Artifactory"
            else
              echo "Failed to push WAR to JFrog Artifactory, but continuing"
            fi
          else
            echo "JFrog credentials not provided, skipping push"
          fi

      # --- RabbitMQ Notification ---
      - name: Setup RabbitMQ Exchange and Queue
        if: success()
        env:
          RABBITMQ_URL: ${{ secrets.RABBITMQ_URL }}
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
          RABBITMQ_QUEUE: "githubactions-ssd"
          RABBITMQ_EXCHANGE: "githubactions.events"
          RABBITMQ_ROUTING_KEY: "githubactions-ssd"
        run: |
          # Skip if credentials are missing
          if [ -z "$RABBITMQ_URL" ] || [ -z "$RABBITMQ_USER" ] || [ -z "$RABBITMQ_PASS" ]; then
            echo "RabbitMQ credentials not configured, skipping"
            exit 0
          fi
          
          echo "Setting up RabbitMQ infrastructure"
          
          # Create exchange
          curl -u $RABBITMQ_USER:$RABBITMQ_PASS \
               -H "Content-Type: application/json" \
               -X PUT "$RABBITMQ_URL/api/exchanges/%2F/$RABBITMQ_EXCHANGE" \
               -d '{"type":"direct","durable":true}'
          
          # Create queue
          curl -u $RABBITMQ_USER:$RABBITMQ_PASS \
               -H "Content-Type: application/json" \
               -X PUT "$RABBITMQ_URL/api/queues/%2F/$RABBITMQ_QUEUE" \
               -d '{"durable":true}'
          
          # Bind queue to exchange
          curl -u $RABBITMQ_USER:$RABBITMQ_PASS \
               -H "Content-Type: application/json" \
               -X POST "$RABBITMQ_URL/api/bindings/%2F/e/$RABBITMQ_EXCHANGE/q/$RABBITMQ_QUEUE" \
               -d '{"routing_key":"'$RABBITMQ_ROUTING_KEY'"}'

      - name: Send Build Notification to RabbitMQ
        if: success()
        env:
          RABBITMQ_URL: ${{ secrets.RABBITMQ_URL }}
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
          RABBITMQ_QUEUE: "githubactions-ssd"
          RABBITMQ_EXCHANGE: "githubactions.events"
          RABBITMQ_ROUTING_KEY: "githubactions-ssd"
          ORG_NAME: "opsmx"
        run: |
          # Skip if credentials are missing
          if [ -z "$RABBITMQ_URL" ] || [ -z "$RABBITMQ_USER" ] || [ -z "$RABBITMQ_PASS" ]; then
            echo "RabbitMQ credentials not configured, skipping notification"
            exit 0
          fi
          
          echo "Preparing RabbitMQ notification for ${{ matrix.type }}: ${{ matrix.name }}"
          
          JOB_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          BUILD_TIME="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          
          # Create message based on artifact type
          if [ "${{ matrix.type }}" = "docker" ]; then
            # Docker image message
            MESSAGE=$(jq -n \
              --arg image "${{ env.DOCKER_USERNAME }}/${{ matrix.name }}:${TIMESTAMP}" \
              --arg imageTag "${TIMESTAMP}" \
              --arg imgsha "sha256:${{ env.IMAGE_DIGEST }}" \
              --arg jobId "${{ github.job }}" \
              --arg buildNumber "${{ github.run_number }}" \
              --arg gitUrl "${{ github.server_url }}/${{ github.repository }}" \
              --arg gitCommit "${{ github.sha }}" \
              --arg gitBranch "${{ github.ref_name }}" \
              --arg jobUrl "$JOB_URL" \
              --arg buildTime "$BUILD_TIME" \
              --arg buildUser "${{ github.actor }}" \
              --arg visibility "public" \
              --arg organization "$ORG_NAME" \
              --arg workflowName "Simulated Customer Build Pipeline" \
              '{
                image: $image,
                imageTag: $imageTag,
                imgsha: $imgsha,
                jobId: $jobId,
                buildNumber: $buildNumber,
                gitUrl: $gitUrl,
                gitCommit: $gitCommit,
                gitBranch: $gitBranch,
                jobUrl: $jobUrl,
                buildTime: $buildTime,
                buildUser: $buildUser,
                diffCommits: "",
                visibility: $visibility,
                parentRepo: "",
                licenseName: "",
                organization: $organization,
                workflowName: $workflowName,
                applicationTags: "docker,container"
              }')
          elif [ "${{ matrix.type }}" = "jar" ] || [ "${{ matrix.type }}" = "war" ]; then
            # JAR/WAR message
            MESSAGE=$(jq -n \
              --arg artifact "${{ matrix.module }}" \
              --arg type "${{ matrix.type }}" \
              --arg version "1.0.0" \
              --arg jobId "${{ github.job }}" \
              --arg buildNumber "${{ github.run_number }}" \
              --arg gitUrl "${{ github.server_url }}/${{ github.repository }}" \
              --arg gitCommit "${{ github.sha }}" \
              --arg gitBranch "${{ github.ref_name }}" \
              --arg jobUrl "$JOB_URL" \
              --arg buildTime "$BUILD_TIME" \
              --arg buildUser "${{ github.actor }}" \
              --arg organization "$ORG_NAME" \
              --arg workflowName "Simulated Customer Build Pipeline" \
              '{
                artifact: $artifact,
                type: $type,
                version: $version,
                jobId: $jobId,
                buildNumber: $buildNumber,
                gitUrl: $gitUrl,
                gitCommit: $gitCommit,
                gitBranch: $gitBranch,
                jobUrl: $jobUrl,
                buildTime: $buildTime,
                buildUser: $buildUser,
                diffCommits: "",
                visibility: "public",
                organization: $organization,
                workflowName: $workflowName,
                applicationTags: "java," + $type
              }')
          fi
          
          # Construct RabbitMQ API payload
          PAYLOAD=$(jq -n \
              --arg vhost "/" \
              --arg name "$RABBITMQ_EXCHANGE" \
              --argjson properties '{}' \
              --arg routing_key "$RABBITMQ_ROUTING_KEY" \
              --arg delivery_mode "2" \
              --arg payload "$MESSAGE" \
              --arg payload_encoding "string" \
              '{
                vhost: $vhost,
                name: $name,
                properties: $properties,
                routing_key: $routing_key,
                delivery_mode: $delivery_mode,
                payload: $payload,
                payload_encoding: $payload_encoding
              }')
          
          # Send notification
          echo "Sending notification to RabbitMQ"
          curl -s -u $RABBITMQ_USER:$RABBITMQ_PASS \
              -H "Content-Type: application/json" \
              -X POST "$RABBITMQ_URL/api/exchanges/%2F/$RABBITMQ_EXCHANGE/publish" \
              --data-binary "$PAYLOAD"
          
          echo "Notification sent for ${{ matrix.type }}: ${{ matrix.name }}"
