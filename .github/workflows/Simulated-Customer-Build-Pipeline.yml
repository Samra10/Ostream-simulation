name: Simulated Customer Build Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # --- Validator Jobs ---
  codeowners_validator:
    name: CodeOwners Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: CodeOwners Validation
        uses: ./.github/actions/validate-CodeOwners

  version_mods_validator:
    name: Version & Mods Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Version & Mods Validation
        uses: ./.github/actions/pullrequest-validate-Version-mods

  template_validator:
    name: Template Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Template Validator Step
        uses: ./.github/actions/pullrequest-templateValidator
          
  # --- Docker Image Builds ---
  build-docker:
    name: Build Docker Images
    needs: [codeowners_validator, version_mods_validator, template_validator]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: frontend-app
            dockerfile: './frontend/Dockerfile'
            context: './frontend'
          - name: test-app
            dockerfile: './test-app/Dockerfile'
            context: './test-app'
    
    env:
      TIMESTAMP: ${{ github.run_id }}
      DOCKER_USERNAME: ahmad1194
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and Push Docker Image
        run: |
          echo "Building Docker image: ${{ matrix.name }}"
          
          # Build with both latest and timestamped tags
          docker build -t "${{ env.DOCKER_USERNAME }}/${{ matrix.name }}:latest" \
                      -t "${{ env.DOCKER_USERNAME }}/${{ matrix.name }}:${TIMESTAMP}" \
                      -f "${{ matrix.dockerfile }}" "${{ matrix.context }}"
          
          # Push both tags
          docker push "${{ env.DOCKER_USERNAME }}/${{ matrix.name }}:latest"
          docker push "${{ env.DOCKER_USERNAME }}/${{ matrix.name }}:${TIMESTAMP}"
          
          # Get image digest for notification
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' \
            ${{ env.DOCKER_USERNAME }}/${{ matrix.name }}:latest | cut -d':' -f2)
          echo "IMAGE_DIGEST=$IMAGE_DIGEST" >> $GITHUB_ENV
          
          echo "Successfully pushed Docker image: ${{ env.DOCKER_USERNAME }}/${{ matrix.name }}"
      
      - name: Setup RabbitMQ and Send Notification
        if: success()
        env:
          RABBITMQ_URL: ${{ secrets.RABBITMQ_URL }}
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
          RABBITMQ_QUEUE: "githubactions-ssd"
          RABBITMQ_EXCHANGE: "githubactions.events"
          RABBITMQ_ROUTING_KEY: "githubactions-ssd"
          ORG_NAME: "ortseam"
        run: |
          # Skip if credentials missing
          if [ -z "$RABBITMQ_URL" ] || [ -z "$RABBITMQ_USER" ] || [ -z "$RABBITMQ_PASS" ]; then
            echo "RabbitMQ credentials not provided, skipping notification"
            exit 0
          fi
          
          # Setup RabbitMQ
          echo "Setting up RabbitMQ infrastructure"
          curl -s -u $RABBITMQ_USER:$RABBITMQ_PASS \
               -H "Content-Type: application/json" \
               -X PUT "$RABBITMQ_URL/api/exchanges/%2F/$RABBITMQ_EXCHANGE" \
               -d '{"type":"direct","durable":true}'
          
          curl -s -u $RABBITMQ_USER:$RABBITMQ_PASS \
               -H "Content-Type: application/json" \
               -X PUT "$RABBITMQ_URL/api/queues/%2F/$RABBITMQ_QUEUE" \
               -d '{"durable":true}'
          
          curl -s -u $RABBITMQ_USER:$RABBITMQ_PASS \
               -H "Content-Type: application/json" \
               -X POST "$RABBITMQ_URL/api/bindings/%2F/e/$RABBITMQ_EXCHANGE/q/$RABBITMQ_QUEUE" \
               -d '{"routing_key":"'$RABBITMQ_ROUTING_KEY'"}'
          
          # Send notification
          JOB_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          BUILD_TIME="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          
          # Create message
          MESSAGE=$(jq -n \
            --arg image "${{ env.DOCKER_USERNAME }}/${{ matrix.name }}:${TIMESTAMP}" \
            --arg imageTag "${TIMESTAMP}" \
            --arg imgsha "sha256:${{ env.IMAGE_DIGEST }}" \
            --arg jobId "${{ github.job }}" \
            --arg buildNumber "${{ github.run_number }}" \
            --arg gitUrl "${{ github.server_url }}/${{ github.repository }}" \
            --arg gitCommit "${{ github.sha }}" \
            --arg gitBranch "${{ github.ref_name }}" \
            --arg jobUrl "$JOB_URL" \
            --arg buildTime "$BUILD_TIME" \
            --arg buildUser "${{ github.actor }}" \
            --arg visibility "public" \
            --arg organization "$ORG_NAME" \
            --arg workflowName "Simulated Customer Build Pipeline" \
            '{
              image: $image,
              imageTag: $imageTag,
              imgsha: $imgsha,
              jobId: $jobId,
              buildNumber: $buildNumber,
              gitUrl: $gitUrl,
              gitCommit: $gitCommit,
              gitBranch: $gitBranch,
              jobUrl: $jobUrl,
              buildTime: $buildTime,
              buildUser: $buildUser,
              diffCommits: "",
              visibility: $visibility,
              parentRepo: "",
              licenseName: "",
              organization: $organization,
              workflowName: $workflowName,
              applicationTags: "docker,container"
            }')
          
          # Send to RabbitMQ
          PAYLOAD=$(jq -n \
            --arg vhost "/" \
            --arg name "$RABBITMQ_EXCHANGE" \
            --argjson properties '{}' \
            --arg routing_key "$RABBITMQ_ROUTING_KEY" \
            --arg delivery_mode "2" \
            --arg payload "$MESSAGE" \
            --arg payload_encoding "string" \
            '{
              vhost: $vhost,
              name: $name,
              properties: $properties,
              routing_key: $routing_key,
              delivery_mode: $delivery_mode,
              payload: $payload,
              payload_encoding: $payload_encoding
            }')
          
          curl -s -u $RABBITMQ_USER:$RABBITMQ_PASS \
              -H "Content-Type: application/json" \
              -X POST "$RABBITMQ_URL/api/exchanges/%2F/$RABBITMQ_EXCHANGE/publish" \
              --data-binary "$PAYLOAD"
          
          echo "Notification sent for Docker image: ${{ matrix.name }}"

  # --- Java Artifact Builds ---
  build-java:
    name: Build Java Artifacts
    needs: [codeowners_validator, version_mods_validator, template_validator]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - type: jar
            name: service1
            module: 'service1'
          - type: war
            name: war-service1
            module: 'war-service1'
    
    env:
      TIMESTAMP: ${{ github.run_id }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      
      - name: Build Java Artifact
        run: |
          MODULE="${{ matrix.module }}"
          TYPE="${{ matrix.type }}"
          
          echo "Building $TYPE for module: $MODULE"
          
          # Check if pom.xml exists
          if [ -f "$MODULE/pom.xml" ]; then
            echo "Found existing pom.xml - attempting Maven build"
            cd $MODULE
            
            # Create target directory if it doesn't exist
            mkdir -p target
            
            # Try Maven build
            mvn package -DskipTests || echo "Maven build failed, will use placeholder"
            cd ..
          else
            echo "No pom.xml found, creating minimal structure"
            mkdir -p "$MODULE/target"
            
            # Create minimal pom.xml
            echo "<project><modelVersion>4.0.0</modelVersion><groupId>com.example</groupId><artifactId>$MODULE</artifactId><version>1.0.0</version></project>" > "$MODULE/pom.xml"
          fi
          
          # Check if build produced artifacts
          if [ "$TYPE" = "jar" ]; then
            ARTIFACT=$(find $MODULE/target -name "*.jar" 2>/dev/null | head -n 1)
            if [ -z "$ARTIFACT" ]; then
              echo "No JAR found, creating placeholder"
              echo "Placeholder JAR content" > "$MODULE/target/$MODULE-1.0.0.jar"
              ARTIFACT="$MODULE/target/$MODULE-1.0.0.jar"
            fi
          else
            ARTIFACT=$(find $MODULE/target -name "*.war" 2>/dev/null | head -n 1)
            if [ -z "$ARTIFACT" ]; then
              echo "No WAR found, creating placeholder"
              echo "Placeholder WAR content" > "$MODULE/target/$MODULE-1.0.0.war"
              ARTIFACT="$MODULE/target/$MODULE-1.0.0.war"
            fi
          fi
          
          echo "Artifact to upload: $ARTIFACT"
          echo "ARTIFACT_PATH=$ARTIFACT" >> $GITHUB_ENV
          
      - name: Push to JFrog Artifactory
        env:
          JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
          JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
          JFROG_URL: ${{ secrets.JFROG_URL }}
        run: |
          MODULE="${{ matrix.module }}"
          TYPE="${{ matrix.type }}"
          ARTIFACT="${{ env.ARTIFACT_PATH }}"
          
          # Skip if no credentials
          if [ -z "$JFROG_USERNAME" ] || [ -z "$JFROG_PASSWORD" ] || [ -z "$JFROG_URL" ]; then
            echo "JFrog credentials not provided, skipping push"
            exit 0
          fi
          
          # Ensure URL has protocol
          if [[ "$JFROG_URL" != http* ]]; then
            JFROG_URL="https://$JFROG_URL"
          fi
          
          # Add /artifactory if needed
          if [[ "$JFROG_URL" != */artifactory ]]; then
            JFROG_URL="$JFROG_URL/artifactory"
          fi
          
          # Use appropriate repository based on type
          if [ "$TYPE" = "jar" ]; then
            REPO="my-jar-repo"
          else
            REPO="my-war-repo"
          fi
          
          echo "Pushing $TYPE to JFrog Artifactory: $ARTIFACT"
          curl -u "$JFROG_USERNAME:$JFROG_PASSWORD" \
               -T "$ARTIFACT" \
               "$JFROG_URL/$REPO/$MODULE/$(basename $ARTIFACT)"
          
          if [ $? -eq 0 ]; then
            echo "Successfully pushed $TYPE to JFrog Artifactory"
          else
            echo "Failed to push $TYPE to JFrog Artifactory"
          fi
      
      - name: Setup RabbitMQ and Send Notification
        if: success()
        env:
          RABBITMQ_URL: ${{ secrets.RABBITMQ_URL }}
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
          RABBITMQ_QUEUE: "githubactions-ssd"
          RABBITMQ_EXCHANGE: "githubactions.events"
          RABBITMQ_ROUTING_KEY: "githubactions-ssd"
          ORG_NAME: "ortseam"
        run: |
          # Skip if credentials missing
          if [ -z "$RABBITMQ_URL" ] || [ -z "$RABBITMQ_USER" ] || [ -z "$RABBITMQ_PASS" ]; then
            echo "RabbitMQ credentials not provided, skipping notification"
            exit 0
          fi
          
          # Setup RabbitMQ
          echo "Setting up RabbitMQ infrastructure"
          curl -s -u $RABBITMQ_USER:$RABBITMQ_PASS \
               -H "Content-Type: application/json" \
               -X PUT "$RABBITMQ_URL/api/exchanges/%2F/$RABBITMQ_EXCHANGE" \
               -d '{"type":"direct","durable":true}'
          
          curl -s -u $RABBITMQ_USER:$RABBITMQ_PASS \
               -H "Content-Type: application/json" \
               -X PUT "$RABBITMQ_URL/api/queues/%2F/$RABBITMQ_QUEUE" \
               -d '{"durable":true}'
          
          curl -s -u $RABBITMQ_USER:$RABBITMQ_PASS \
               -H "Content-Type: application/json" \
               -X POST "$RABBITMQ_URL/api/bindings/%2F/e/$RABBITMQ_EXCHANGE/q/$RABBITMQ_QUEUE" \
               -d '{"routing_key":"'$RABBITMQ_ROUTING_KEY'"}'
          
          # Send notification
          MODULE="${{ matrix.module }}"
          TYPE="${{ matrix.type }}"
          JOB_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          BUILD_TIME="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          
          # Create a proper tag string outside of jq
          TAGS="java,${TYPE}"
          
          # Create message without concatenation in jq
          MESSAGE=$(jq -n \
            --arg artifact "$MODULE" \
            --arg type "$TYPE" \
            --arg version "1.0.0" \
            --arg jobId "${{ github.job }}" \
            --arg buildNumber "${{ github.run_number }}" \
            --arg gitUrl "${{ github.server_url }}/${{ github.repository }}" \
            --arg gitCommit "${{ github.sha }}" \
            --arg gitBranch "${{ github.ref_name }}" \
            --arg jobUrl "$JOB_URL" \
            --arg buildTime "$BUILD_TIME" \
            --arg buildUser "${{ github.actor }}" \
            --arg organization "$ORG_NAME" \
            --arg workflowName "Simulated Customer Build Pipeline" \
            --arg tags "$TAGS" \
            '{
              artifact: $artifact,
              type: $type,
              version: $version,
              jobId: $jobId,
              buildNumber: $buildNumber,
              gitUrl: $gitUrl,
              gitCommit: $gitCommit,
              gitBranch: $gitBranch,
              jobUrl: $jobUrl,
              buildTime: $buildTime,
              buildUser: $buildUser,
              diffCommits: "",
              visibility: "public",
              organization: $organization,
              workflowName: $workflowName,
              applicationTags: $tags
            }')
          
          # For debugging
          echo "MESSAGE JSON:"
          echo "$MESSAGE" | jq .
          
          # Send to RabbitMQ
          PAYLOAD=$(jq -n \
            --arg vhost "/" \
            --arg name "$RABBITMQ_EXCHANGE" \
            --argjson properties '{}' \
            --arg routing_key "$RABBITMQ_ROUTING_KEY" \
            --arg delivery_mode "2" \
            --arg payload "$MESSAGE" \
            --arg payload_encoding "string" \
            '{
              vhost: $vhost,
              name: $name,
              properties: $properties,
              routing_key: $routing_key,
              delivery_mode: $delivery_mode,
              payload: $payload,
              payload_encoding: $payload_encoding
            }')
          
          curl -v -u $RABBITMQ_USER:$RABBITMQ_PASS \
              -H "Content-Type: application/json" \
              -X POST "$RABBITMQ_URL/api/exchanges/%2F/$RABBITMQ_EXCHANGE/publish" \
              --data-binary "$PAYLOAD"
          
          echo "Notification sent for $TYPE: $MODULE"
