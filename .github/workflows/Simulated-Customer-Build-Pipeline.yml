name: Simulated Customer Build Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # --- Validator Jobs ---
  codeowners_validator:
    name: CodeOwners Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: CodeOwners Validation
        run: |
          echo "Simulating CodeOwners check..."
          echo "OK!"

  version_mods_validator:
    name: Version & Mods Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Version & Mods Validation
        run: |
          echo "Simulating version & mods checks..."
          echo "Looks fine!"

  template_validator:
    name: Template Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Template Validator Step
        run: |
          echo "Simulating template validation..."
          echo "All good!"

  # --- Final Build Job ---
  build:
    name: Build Artifacts
    needs: [codeowners_validator, version_mods_validator, template_validator]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false        # This ensures each artifact's build runs independently.
      matrix:
        artifact:
          - type: docker
            name: docker-image
            dockerfile: './Dockerfile'
            context: '.'
          - type: jar
            name: service1
            module: 'service1'
          - type: war
            name: war-service1
            module: 'war-service1'
          - type: frontend
            name: frontend-app
            dockerfile: './frontend/Dockerfile'
            context: './frontend'
    env:
      TIMESTAMP: ${{ github.run_id }}   # Using run_id as a pseudo-timestamp

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # Add Docker login step before building/pushing
      - name: Login to JFrog Docker Registry
        if: matrix.artifact.type == 'docker' || matrix.artifact.type == 'frontend'
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.JFROG_URL }}
          username: ${{ secrets.JFROG_USERNAME }}
          password: ${{ secrets.JFROG_PASSWORD }}

      # Validate the Docker registry URL
      - name: Validate Docker Registry URL
        if: matrix.artifact.type == 'docker' || matrix.artifact.type == 'frontend'
        run: |
          # Extract the registry domain for validation
          REGISTRY_DOMAIN=$(echo "${{ secrets.JFROG_URL }}" | cut -d'/' -f1)
          echo "Validating registry domain: $REGISTRY_DOMAIN"
          
          # Check if the domain is valid
          if [[ ! $REGISTRY_DOMAIN =~ ^[a-zA-Z0-9]([a-zA-Z0-9\-]*[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]*[a-zA-Z0-9])?)*$ ]]; then
            echo "ERROR: Invalid Docker registry domain format"
            exit 1
          fi
          
          # Create proper Docker repository reference
          DOCKER_REPO="${{ secrets.JFROG_URL }}"
          
          # Ensure it's properly formatted for Docker (remove trailing slashes)
          DOCKER_REPO=$(echo "$DOCKER_REPO" | sed 's/\/$//')
          
          echo "DOCKER_REPO=$DOCKER_REPO" >> $GITHUB_ENV

      - name: Build Artifact
        run: |
          if [ "${{ matrix.artifact.type }}" = "docker" ]; then
            echo "Building Docker image..."
            # Use the validated repository URL
            docker build -t "${{ env.DOCKER_REPO }}/docker/${{ matrix.artifact.name }}:${TIMESTAMP}" \
              -f "${{ matrix.artifact.dockerfile }}" "${{ matrix.artifact.context }}"
            docker push "${{ env.DOCKER_REPO }}/docker/${{ matrix.artifact.name }}:${TIMESTAMP}"
            
            IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' \
              "${{ env.DOCKER_REPO }}/docker/${{ matrix.artifact.name }}:${TIMESTAMP}" | cut -d':' -f2)
            echo "IMAGE_DIGEST=$IMAGE_DIGEST" >> $GITHUB_ENV

          elif [ "${{ matrix.artifact.type }}" = "jar" ]; then
            echo "Building JAR for module: ${{ matrix.artifact.module }}"
            cd ${{ matrix.artifact.module }}
            mvn clean package -DskipTests
            cd ..
            JAR_FILE=$(ls ${{ matrix.artifact.module }}/target/*.jar | head -n 1)
            echo "Pushing JAR to JFROG Artifactory..."
            curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }}" \
              -T "$JAR_FILE" \
              "${{ secrets.JFROG_URL }}/my-jar-repo/${{ matrix.artifact.module }}/$(basename $JAR_FILE)"

          elif [ "${{ matrix.artifact.type }}" = "war" ]; then
            echo "Building WAR for module: ${{ matrix.artifact.module }}"
            cd ${{ matrix.artifact.module }}
            mvn clean package -DskipTests
            cd ..
            WAR_FILE=$(ls ${{ matrix.artifact.module }}/target/*.war | head -n 1)
            echo "Pushing WAR to JFROG Artifactory..."
            curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }}" \
              -T "$WAR_FILE" \
              "${{ secrets.JFROG_URL }}/my-war-repo/${{ matrix.artifact.module }}/$(basename $WAR_FILE)"

          elif [ "${{ matrix.artifact.type }}" = "frontend" ]; then
            echo "Building Frontend Docker image..."
            # Use the validated repository URL
            docker build -t "${{ env.DOCKER_REPO }}/docker/${{ matrix.artifact.name }}:${TIMESTAMP}" \
              -f "${{ matrix.artifact.dockerfile }}" "${{ matrix.artifact.context }}"
            docker push "${{ env.DOCKER_REPO }}/docker/${{ matrix.artifact.name }}:${TIMESTAMP}"
            
            IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' \
              "${{ env.DOCKER_REPO }}/docker/${{ matrix.artifact.name }}:${TIMESTAMP}" | cut -d':' -f2)
            echo "IMAGE_DIGEST=$IMAGE_DIGEST" >> $GITHUB_ENV
          fi

      - name: Send Build Metadata to RabbitMQ
        env:
          RABBITMQ_URL: ${{ secrets.RABBITMQ_URL }}
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
        run: |
          if [ "${{ matrix.artifact.type }}" = "docker" ] || [ "${{ matrix.artifact.type }}" = "frontend" ]; then
            PAYLOAD=$(jq -n \
              --arg artifact "${{ matrix.artifact.name }}" \
              --arg tag "$TIMESTAMP" \
              --arg digest "sha256:${{ env.IMAGE_DIGEST }}" \
              '{artifact: $artifact, imageTag: $tag, digest: $digest}')
          elif [ "${{ matrix.artifact.type }}" = "jar" ]; then
            PAYLOAD=$(jq -n --arg artifact "${{ matrix.artifact.name }}" '{artifact: $artifact, type: "jar"}')
          elif [ "${{ matrix.artifact.type }}" = "war" ]; then
            PAYLOAD=$(jq -n --arg artifact "${{ matrix.artifact.name }}" '{artifact: $artifact, type: "war"}')
          fi

          echo "Sending build event to RabbitMQ for artifact: ${{ matrix.artifact.name }}"
          curl -u $RABBITMQ_USER:$RABBITMQ_PASS \
              -H "Content-Type: application/json" \
              -X POST "$RABBITMQ_URL/api/exchanges/%2F/build-events/publish" \
              --data-binary "$(jq -n --arg payload "$PAYLOAD" --arg routing_key "build.event" \
                '{vhost: "/", name: "build-events", routing_key: $routing_key, payload: $payload, payload_encoding: "string"}')"
