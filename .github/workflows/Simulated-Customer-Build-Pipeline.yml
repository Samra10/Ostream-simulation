name: Simulated Customer Build Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # --- Validator Jobs ---
  codeowners_validator:
    name: CodeOwners Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: CodeOwners Validation
        run: |
          echo "Simulating CodeOwners check..."
          echo "OK!"

  version_mods_validator:
    name: Version & Mods Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Version & Mods Validation
        run: |
          echo "Simulating version & mods checks..."
          echo "Looks fine!"

  template_validator:
    name: Template Validator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Template Validator Step
        run: |
          echo "Simulating template validation..."
          echo "All good!"

  # --- Final Build Job ---
  build:
    name: Build Artifacts
    needs: [codeowners_validator, version_mods_validator, template_validator]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false        # This ensures each artifact's build runs independently.
      matrix:
        artifact:
          - type: docker
            name: docker-image
            dockerfile: './Dockerfile'
            context: '.'
          - type: frontend
            name: frontend-app
            dockerfile: './frontend/Dockerfile'
            context: './frontend'
    env:
      TIMESTAMP: ${{ github.run_id }}   # Using run_id as a pseudo-timestamp

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # Process JFrog URL to make it Docker-compatible
      - name: Process Docker Registry URL
        if: matrix.artifact.type == 'docker' || matrix.artifact.type == 'frontend'
        run: |
          # Get JFrog URL from secrets
          JFROG_URL="${{ secrets.JFROG_URL }}"
          
          # Remove protocol prefix if present (http:// or https://)
          DOCKER_REPO=$(echo "$JFROG_URL" | sed -E 's#^https?://##')
          
          # Remove trailing slashes if present
          DOCKER_REPO=$(echo "$DOCKER_REPO" | sed 's#/$##')
          
          # Export for use in subsequent steps
          echo "DOCKER_REPO=$DOCKER_REPO" >> $GITHUB_ENV
          echo "Using Docker registry: $DOCKER_REPO"

      # Check if folders for other modules exist before including them in the build
      - name: Verify Module Structure
        id: check_modules
        run: |
          if [ -d "./service1" ] && [ -f "./service1/pom.xml" ]; then
            echo "service1_exists=true" >> $GITHUB_OUTPUT
          else
            echo "service1_exists=false" >> $GITHUB_OUTPUT
            echo "Note: service1 module not found or missing pom.xml"
          fi
          
          if [ -d "./war-service1" ] && [ -f "./war-service1/pom.xml" ]; then
            echo "war_service1_exists=true" >> $GITHUB_OUTPUT
          else
            echo "war_service1_exists=false" >> $GITHUB_OUTPUT
            echo "Note: war-service1 module not found or missing pom.xml"
          fi

      # Add Docker login step before building/pushing
      - name: Login to JFrog Docker Registry
        if: matrix.artifact.type == 'docker' || matrix.artifact.type == 'frontend'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REPO }}
          username: ${{ secrets.JFROG_USERNAME }}
          password: ${{ secrets.JFROG_PASSWORD }}

      - name: Build Docker/Frontend Artifact
        if: matrix.artifact.type == 'docker' || matrix.artifact.type == 'frontend'
        run: |
          echo "Building ${{ matrix.artifact.type }} image: ${{ matrix.artifact.name }}..."
          
          # Use docker build command with properly formatted registry URL
          docker build -t "${{ env.DOCKER_REPO }}/docker/${{ matrix.artifact.name }}:${TIMESTAMP}" \
            -f "${{ matrix.artifact.dockerfile }}" "${{ matrix.artifact.context }}"
          
          echo "Pushing to registry..."
          docker push "${{ env.DOCKER_REPO }}/docker/${{ matrix.artifact.name }}:${TIMESTAMP}"
          
          # Get image digest for later use
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' \
            "${{ env.DOCKER_REPO }}/docker/${{ matrix.artifact.name }}:${TIMESTAMP}" | cut -d':' -f2)
          echo "IMAGE_DIGEST=$IMAGE_DIGEST" >> $GITHUB_ENV

      - name: Build and Push JAR Artifact
        if: matrix.artifact.type == 'jar' && steps.check_modules.outputs.service1_exists == 'true'
        run: |
          echo "Building JAR for service1 module..."
          cd service1
          mvn clean package -DskipTests
          cd ..
          
          # Check if any JAR files were generated
          if ls service1/target/*.jar 1> /dev/null 2>&1; then
            JAR_FILE=$(ls service1/target/*.jar | head -n 1)
            echo "Pushing JAR to JFROG Artifactory: $JAR_FILE"
            
            # Construct JFrog URL with protocol for curl
            JFROG_FULL_URL="${{ secrets.JFROG_URL }}"
            # Ensure it has a protocol prefix
            if [[ "$JFROG_FULL_URL" != http* ]]; then
              JFROG_FULL_URL="https://$JFROG_FULL_URL"
            fi
            
            curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }}" \
              -T "$JAR_FILE" \
              "$JFROG_FULL_URL/my-jar-repo/service1/$(basename $JAR_FILE)"
          else
            echo "No JAR files found in service1/target directory"
            exit 1
          fi

      - name: Build and Push WAR Artifact
        if: matrix.artifact.type == 'war' && steps.check_modules.outputs.war_service1_exists == 'true'
        run: |
          echo "Building WAR for war-service1 module..."
          cd war-service1
          mvn clean package -DskipTests
          cd ..
          
          # Check if any WAR files were generated
          if ls war-service1/target/*.war 1> /dev/null 2>&1; then
            WAR_FILE=$(ls war-service1/target/*.war | head -n 1)
            echo "Pushing WAR to JFROG Artifactory: $WAR_FILE"
            
            # Construct JFrog URL with protocol for curl
            JFROG_FULL_URL="${{ secrets.JFROG_URL }}"
            # Ensure it has a protocol prefix
            if [[ "$JFROG_FULL_URL" != http* ]]; then
              JFROG_FULL_URL="https://$JFROG_FULL_URL"
            fi
            
            curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }}" \
              -T "$WAR_FILE" \
              "$JFROG_FULL_URL/my-war-repo/war-service1/$(basename $WAR_FILE)"
          else
            echo "No WAR files found in war-service1/target directory"
            exit 1
          fi

      - name: Send Build Metadata to RabbitMQ
        if: success()
        env:
          RABBITMQ_URL: ${{ secrets.RABBITMQ_URL }}
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
        run: |
          if [ "${{ matrix.artifact.type }}" = "docker" ] || [ "${{ matrix.artifact.type }}" = "frontend" ]; then
            PAYLOAD=$(jq -n \
              --arg artifact "${{ matrix.artifact.name }}" \
              --arg tag "$TIMESTAMP" \
              --arg digest "sha256:${{ env.IMAGE_DIGEST }}" \
              '{artifact: $artifact, imageTag: $tag, digest: $digest}')
          elif [ "${{ matrix.artifact.type }}" = "jar" ]; then
            PAYLOAD=$(jq -n --arg artifact "${{ matrix.artifact.name }}" '{artifact: $artifact, type: "jar"}')
          elif [ "${{ matrix.artifact.type }}" = "war" ]; then
            PAYLOAD=$(jq -n --arg artifact "${{ matrix.artifact.name }}" '{artifact: $artifact, type: "war"}')
          fi

          echo "Sending build event to RabbitMQ for artifact: ${{ matrix.artifact.name }}"
          curl -u $RABBITMQ_USER:$RABBITMQ_PASS \
              -H "Content-Type: application/json" \
              -X POST "$RABBITMQ_URL/api/exchanges/%2F/build-events/publish" \
              --data-binary "$(jq -n --arg payload "$PAYLOAD" --arg routing_key "build.event" \
                '{vhost: "/", name: "build-events", routing_key: $routing_key, payload: $payload, payload_encoding: "string"}')"
